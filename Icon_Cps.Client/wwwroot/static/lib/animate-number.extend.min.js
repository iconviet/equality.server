jQuery.fn.extend({
    integer: function(number, padding) {
        return this.each(function() {
            if ($(this).attr('number') != null) {
                $(this).prop('number', $(this).attr('number'));
                $(this).removeAttr('number');
            }
            if (padding != null) {
                $(this).animateNumber({
                    number: number,
                    numberStep: function(now, tween) {
                        var text = padding + Math.round(now).toString();
                        text = text.substring(Math.round(now).toString().length);
                        $(tween.elem).prop('number', Math.round(now)).text(text);
                    }
                });
            } else {
                $(this).animateNumber({
                    number: number,
                    numberStep: $.animateNumber.numberStepFactories.separator(',')
                });
            }
        });
    },
    money: function(number, fraction = 0) {
        return this.each(function() {
            var factor = Math.pow(10, fraction);
            if ($(this).attr('number') != null) {
                $(this).prop('number', $(this).attr('number'));
                $(this).removeAttr('number');
            }
            $(this).animateNumber({
                number: number * factor,
                numberStep: function(now, tween) {
                    var text = (Math.floor(now) / factor).toFixed(fraction);
                    $(tween.elem).prop('number', Math.round(now)).text('$' + text);
                }
            });
        });
    },
    percent: function(number) {
        return this.each(function() {
            var factor = Math.pow(10, 4);
            if ($(this).attr('number') != null) {
                $(this).prop('number', $(this).attr('number'));
                $(this).removeAttr('number');
            }
            $(this).animateNumber({
                number: number * factor,
                numberStep: function(now, tween) {
                    var text = (Math.floor(now) / factor * 100).toFixed(2);
                    $(tween.elem).prop('number', Math.round(now)).text(text + '%');
                }
            });
        });
    },
    decimal: function(number, fraction, split = false) {
        return this.each(function() {
            var factor = Math.pow(10, fraction);
            if ($(this).attr('number') != null) {
                $(this).prop('number', $(this).attr('number'));
                $(this).removeAttr('number');
            }
            $(this).animateNumber({
                number: number * factor,
                numberStep: function(now, tween) {
                    var text = (Math.floor(now) / factor).toFixed(fraction);
                    if (split === false) {
                        $(tween.elem).prop('number', Math.round(now)).text(text);
                    } else {
                        var part = text.split('.');
                        if (part.length === 2) {
                            var zero = "number-part";
                            if (parseInt(part[0]) === 0 && parseInt(part[1]) === 0) {
                                zero = "fraction-part";
                            }
                            $(tween.elem).prop('number', Math.round(now)).html(
                                '<span class="' + zero + '">' + part[0] + '</span>' +
                                '<span class="fraction-part">.' + part[1] + '</span>');
                        }
                    }
                }
            });
        });
    },
});